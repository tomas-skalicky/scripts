#!/usr/bin/env bash
#author      :Tomas Skalicky <skalicky.tomas@gmail.com>
#===============================================================================

#-------------------------------------------------------------------------------

configure_file_system() {
    # noatime ... eliminates the need by the system to make writes to
    #             the file system for files which are simply being read.
    # discard ... enables TRIM (key feature for SSDs)
    local -r additional_ssh_disks_options=,noatime,discard
    local -r fstab_file_path=/etc/fstab
    sed \
        --in-place \
        --regexp-extend \
        "s/^(.*\/[ ]+ext4[ ]+errors=remount-ro)([ ]+.*)$/\1$additional_ssh_disks_options\2/" \
        "$fstab_file_path"
    sed \
        --in-place \
        --regexp-extend \
        "s/^(.*\/home[ ]+ext4[ ]+defaults)([ ]+.*)$/\1$additional_ssh_disks_options\2/" \
        "$fstab_file_path"
    mount --all
}

#-------------------------------------------------------------------------------

private_laptop_specific_debian_packages_to_install=(
    postgresql
)

install_private_laptop_specific_debian_packages() {
    aptget_install "${private_laptop_specific_debian_packages_to_install[@]}"
}

#-------------------------------------------------------------------------------

private_laptop_specific_snap_packages_to_install=(
    postman
)

install_private_laptop_specific_snap_packages() {
    snap install "${private_laptop_specific_snap_packages_to_install[@]}"
}

#-------------------------------------------------------------------------------


private_laptop_specific_python_packages_to_install=(
    jupyter      # jupyter notebook is not a part of the PyCharm community
                 # version any more
    matplotlib
    pandas       # Needed for my bot using algorithm based on support and
                 # resistance.
    PyFunctional # Needed for my bot using algorithm based on support and
                 # resistance.
)

install_private_laptop_specific_python_packages() {
    # --user ... pip installs Python packages to a system directory (such as
    #            /usr/local/lib/python3.6) by default. This requires root
    #            access. The option --user makes pip install packages in your
    #            home directory instead which does not require any special
    #            priviledges. Go to ~/.local/bin (such as
    #            ~/.local/bin/jupyter-notebook) to execute the package.
    sudo --user="${username:?}" python3 -m pip install --user "${private_laptop_specific_python_packages_to_install[@]}"
}

#-------------------------------------------------------------------------------


configure_ssh() {
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r ssh_dir=${user_home:?}/.ssh
    if [[ ! -d $ssh_dir ]]; then
        sudo --user="${username:?}" mkdir "$ssh_dir"
    fi
    chmod 700 "$ssh_dir"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r key_storage_dirpath=${user_home:?}/Documents/development/.ssh
    local -r filepath=$ssh_dir/config
    local file_contents
    set +e
    read -r -d '' file_contents <<- EOF
	Host github.com
	IdentityFile $key_storage_dirpath/id_rsa
	
	# My DigitalOcean Jenkins
	Host jenkins
	HostName 141.0.170.48
	User root
	IdentityFile $key_storage_dirpath/digitalocean/id_rsa
	
	# My DigitalOcean Nexus
	Host nexus
	HostName 192.241.179.41
	User root
	IdentityFile $key_storage_dirpath/digitalocean/id_rsa
	
	Host bitbucket.org
	IdentityFile $key_storage_dirpath/bitbucket/id_rsa
	EOF
    set -e
    set_file_contents \
                      "$filepath" \
                      "$file_contents"
    chown_to_user "$filepath"
    chmod 600 "$filepath"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

configure_gpg_agent() {
    local filepath=$user_home/.gnupg/gpg-agent.conf
    local file_contents
    # To cache a passphrase for max. 90 sec. and then require the passphrase
    # from the user again.
    set +e
    read -r -d '' file_contents <<- EOF
	default-cache-ttl 90
	max-cache-ttl 90
	EOF
    set -e
    set_file_contents \
                      "$filepath" \
                      "$file_contents"
    chown_to_user "$filepath"
    chmod 600 "$filepath"
}

configure_gnupg2() {
    configure_gpg_agent
}

#-------------------------------------------------------------------------------

install_multimedia_software() {
    add-apt-repository ppa:kdenlive/kdenlive-stable -y
    aptget_update
    aptget_install kdenlive
}

#-------------------------------------------------------------------------------

set_up_backup_process() {
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r backup_mount_point=/backup
    [[ ! -d $backup_mount_point ]] && mkdir --verbose "$backup_mount_point"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r rsync_options=(
        '--archive'
        '--verbose'
        '--log-file=/var/log/backup_cronjob.rsync.log'
        '--stats'
        '--exclude backup/'
        '--exclude cdrom/'
        '--exclude dev/'
        "--exclude home/${username:?}/.cache"
        '--exclude lost\+found/'
        '--exclude media/'
        '--exclude mnt/'
        '--exclude proc/'
        '--exclude run/'
        '--exclude sys/'
        '--exclude tmp/'
        '--exclude var/tmp/'
    )
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r filepath=/etc/cron.d/backup
    local file_contents
    # --delete-after option means:
    #     1. rsync syncs files from source (laptop disk) to desctination
    #        (backup folder)
    #     2. When the sync is done, rsync removes from the destionation
    #        those files, which are no more in the source.
    set +e
    read -r -d '' file_contents <<- EOF
	0 20 * * *   root   chronic rsync ${rsync_options[@]} / "$backup_mount_point"
	EOF
    set -e
    set_file_contents \
                      "$filepath" \
                      "$file_contents"
    chmod 644 "$filepath"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

configure_crypto_bot_anacron() {
    local -r anacrontab_file_path=${1:?}
    local -r crypto_bot_for_anacron_production_run_home_path=${2:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local block_contents
    set +e
    read -r -d '' block_contents <<- EOF
	@daily	5	crypto-bot	cd "$crypto_bot_for_anacron_production_run_home_path" && ./production-command.bash 2>&1 | /usr/bin/logger -i
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Crypto bot'
    local -r end_comment='# <END> Crypto bot'
    set_or_replace_block_contents_in_file \
                                         "$anacrontab_file_path" \
                                         "$block_contents" \
                                         "$begin_comment" \
                                         "$end_comment"
    chown_to_user "$anacrontab_file_path"
}

configure_start_of_user_specific_anacron_on_user_login() {
    local -r anacrontab_file_path=${1:?}
    local -r anacron_spool_directory_path=${2:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local block_contents
    set +e
    read -r -d '' block_contents <<- EOF
	anacron -t "$anacrontab_file_path" -S "$anacron_spool_directory_path"
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Start user-specific Anacron'
    local -r end_comment='# <END> Start user-specific Anacron'
    set_or_replace_block_contents_in_file \
                                         "${user_home:?}"/.bashrc \
                                         "$block_contents" \
                                         "$begin_comment" \
                                         "$end_comment"
}

set_up_anacron_for_crypto_bot() {
    local -r crypto_bot_for_anacron_production_run_home_path=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r anacrontab_directory_path=${user_home:?}/.anacron/etc
    local -r anacrontab_file_path=${anacrontab_directory_path:?}/anacrontab
    # The folder where dates of executions of Anacron jobs are stored.
    local -r anacron_spool_directory_path=${user_home:?}/.anacron/var/spool/anacron
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sudo --user="${username:?}" mkdir --parents \
                                                "$anacrontab_directory_path" \
                                                "$anacron_spool_directory_path"
    configure_crypto_bot_anacron \
                                 "$anacrontab_file_path" \
                                 "$crypto_bot_for_anacron_production_run_home_path"
    configure_start_of_user_specific_anacron_on_user_login \
                                                           "$anacrontab_file_path" \
                                                           "$anacron_spool_directory_path"
}

set_up_crontab_for_crypto_bot() {
    local -r crypto_bot_for_crontab_production_run_home_path=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r crontab_spool_directory_path=/var/spool/cron/crontabs
    mkdir --parents "${crontab_spool_directory_path:?}"
    chmod 730 "${crontab_spool_directory_path:?}"
    local -r crontab_group_name=crontab
    chgrp "${crontab_group_name:?}" "${crontab_spool_directory_path:?}"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r crontab_file_path=${crontab_spool_directory_path:?}/${username:?}
    local block_contents
    set +e
    read -r -d '' block_contents <<- EOF
	11 * * * * cd "${crypto_bot_for_crontab_production_run_home_path:?}" && ./production-command.bash
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Crypto bot crontab'
    local -r end_comment='# <END> Crypto bot crontab'
    # A sticky bit is temporarily removed to update the crontab file.
    chmod -t "${crontab_spool_directory_path:?}"
    set_or_replace_block_contents_in_file \
                                          "${crontab_file_path:?}" \
                                          "${block_contents:?}" \
                                          "${begin_comment:?}" \
                                          "${end_comment:?}"
    # A stick bit (the first 1) is added because all users have write permission
    # in the folder, but every user should be allowed to delete only files what
    # they are an owner of.
    chmod +t "${crontab_spool_directory_path:?}"
    chgrp "$crontab_group_name" "$crontab_file_path"
    chmod 600 "$crontab_file_path"
}

#-------------------------------------------------------------------------------

create_or_update_auxiliary_tmux_functions_for_interactive_shells() {
    create_or_update_common_auxiliary_tmux_functions_for_interactive_shells
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local block_contents
    set +e
    # Don't replace EOF with 'EOF'. Otherwise, you would have to replace all \$
    # with $.
    read -r -d '' block_contents <<- EOF
	open_tmux() {
	    local -r session_name=\$(get_new_tmux_session_name)
	    local -r submit_command_key=C-m
	    local -r doublecmd_window_name=doublecmd
	    tmux new-session \\
	                     -d \\
	                     -s "\$session_name" \\
	                     -n "\$doublecmd_window_name"
	    tmux send-keys \\
	                   -t "\$session_name":"\$doublecmd_window_name" \\
	                    doublecmd "\$submit_command_key"
	    local -r chrome_window_name=chrome
	    tmux new-window \\
	                    -d \\
	                    -t "\$session_name" \\
	                    -n "\$chrome_window_name"
	    tmux send-keys \\
	                   -t "\$session_name":"\$chrome_window_name" \\
	                   google-chrome "\$submit_command_key"
	    local -r idea_window_name=idea
	    tmux new-window \\
	                    -d \\
	                    -t "\$session_name" \\
	                    -n "\$idea_window_name"
	    tmux send-keys \\
	                   -t "\$session_name":"\$idea_window_name" \\
	                   '#ideaIC' "\$submit_command_key"
	    local -r bot_window_name=bot
	    tmux new-window \\
	                    -t "\$session_name" \\
	                    -n "\$bot_window_name" \\
	                    'bash -l'
	    tmux send-keys \\
	                   -t "\$session_name":"\$bot_window_name" \\
	                   'cd_spring; cd cointradingbot; profile=production; log_file="\$profile".log; >"\$log_file"; #gw bootRun -PmainProfile="\$profile" | tee "\$log_file"' "\$submit_command_key"
	    # The 1st pane is for the execution of the bot itself. Does not need much
	    # place.
	    tmux split-window \\
	                      -t "\$session_name":"\$bot_window_name" \\
	                      -p 95 \\
	                      -v
	    tmux send-keys \\
	                   -t "\$session_name":"\$bot_window_name" \\
	                   'cd_spring; cd cointradingbot; #tail -90f production.log' "\$submit_command_key"
	    # The 2nd pane is for the tailing of the whole log of the bot, hence
	    # the pane needs to be large.
	    tmux split-window \\
	                      -t "\$session_name":"\$bot_window_name" \\
	                      -p 50 \\
	                      -v
	    tmux send-keys \\
	                   -t "\$session_name":"\$bot_window_name" \\
	                   'cd_spring; cd cointradingbot; #tail -90f production.log | grep Exception' "\$submit_command_key"
	    # The 3rd pane is for tailing of exceptions filtered out of the log of
	    # the bot, hence the pane does not need to be so large.
	    # The 4th pane is for the start of sqldeveloper and htop, hence the
	    # pane does not need to be so large, but cannot be too small either.
	    tmux split-window \\
	                      -t "\$session_name":"\$bot_window_name" \\
	                      -p 30 \\
	                      -v
	    tmux send-keys \\
	                   -t "\$session_name":"\$bot_window_name" \\
	                   '#/opt/sqldeveloper/sqldeveloper-18.3.0.277.2354-no-jre/sqldeveloper.sh' "\$submit_command_key"
	    tmux split-window \\
	                      -t "\$session_name":"\$bot_window_name" \\
	                      -h
	    tmux send-keys \\
	                   -t "\$session_name":"\$bot_window_name" \\
	                   htop "\$submit_command_key"
	    local -r workspace_window_name=workspace
	    tmux new-window \\
	                    -t "\$session_name" \\
	                    -n "\$workspace_window_name" \\
	                    'bash -l'
	    tmux -u -2 attach-session
	}
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Auxiliary tmux functions'
    local -r end_comment='# <END> Auxiliary tmux functions'
    set_or_replace_block_contents_in_file \
                                         "${user_home:?}"/.bashrc \
                                         "$block_contents" \
                                         "$begin_comment" \
                                         "$end_comment"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

create_or_update_auxiliary_functions_for_interactive_shells() {
    local -r dropbox_home_dir=${1:?}
    local -r python_projects_home_dir=${2:?}
    local -r java_projects_home_dir=${3:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # shellcheck disable=SC2154
    check_if_array_variable_set_and_not_empty dropbox_dirpaths "${dropbox_dirpaths[@]}"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    declare -A function_prefices
    # shellcheck disable=SC2154
    function_prefices[cd]=cd_
    # shellcheck disable=SC2154
    function_prefices[open]=open_
    declare -A dirpaths
    # shellcheck disable=SC2154
    dirpaths[development]=${user_home:?}/Documents/development
    # shellcheck disable=SC2154
    dirpaths[groovy_source_files]=${dirpaths[development]}/groovy/source_files
    # shellcheck disable=SC2154
    dirpaths[dropbox]=$dropbox_home_dir
    # Lines starting with # shellcheck are there in order to avoid warnings
    # popping out when one opens ~/.bashrc in vim.
    local block_contents
    set +e
    read -r -d '' block_contents <<- EOF
	${function_prefices[cd]}downloads() {
	    cd "$user_home"/Downloads
	}
	${function_prefices[cd]}dropbox() {
	    cd "${dirpaths[dropbox]}"
	}
	${function_prefices[cd]}java_source_files() {
	    cd "$java_projects_home_dir"
	}
	${function_prefices[cd]}groovy_source_files() {
	    cd "${dirpaths[groovy_source_files]}"
	}
	${function_prefices[cd]}spring() {
	    cd "$java_projects_home_dir"/spring
	}
	${function_prefices[cd]}python_source_files() {
	    cd "$python_projects_home_dir"
	}
	${function_prefices[cd]}bash_source_files() {
	    cd "${dirpaths[development]}"/bash/source_files
	}
	${function_prefices[cd]}scripts() {
	    # shellcheck disable=SC2140
	    cd "${dirpaths[dropbox]}"/"${dropbox_dirpaths[scripts]}"
	}
	back_up_on_external_disk() {
	    # shellcheck disable=SC2140
	    cd "${dirpaths[dropbox]}"/"${dropbox_dirpaths[scripts]}/adhoc_backups"
	    sudo ./back_up_to_extern_disk.bash "${username:?}" tomas_backup "\$1"
	    cd - >/dev/null
	}
	set_up_my_mint() {
	    # shellcheck disable=SC2140
	    cd "${dirpaths[dropbox]}"/"${dropbox_dirpaths[mint_setup_scripts]}/private_laptop"
	    sudo ./set_up_my_private_mint.bash
	    cd - >/dev/null
	}
	${function_prefices[open]}motivational_video() {
	    xdg-open "$user_home"/Documents/video/others/'Best Motivational Video - Speeches Compilation 1 Hour Long (HD).mp4'
	}
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Auxiliary functions'
    local -r end_comment='# <END> Auxiliary functions'
    set_or_replace_block_contents_in_file \
                                         "$user_home"/.bashrc \
                                         "$block_contents" \
                                         "$begin_comment" \
                                         "$end_comment"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    create_or_update_generate_password_function_for_interactive_shells
    create_or_update_auxiliary_tmux_functions_for_interactive_shells
}

#-------------------------------------------------------------------------------

clone_git_repos_and_upgrade_virtual_environments() {
    local -r python_projects_home_dir=${1:?}
    local -r java_projects_home_dir=${2:?}
    local -r crypto_bot_for_anacron_production_run_home_path=${3:?}
    local -r crypto_bot_for_crontab_production_run_home_path=${4:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r interview_puzzles_clone_home=$python_projects_home_dir/interview_puzzles
    git_repo_clone_or_pull git@github.com:tomas-skalicky/interview_puzzles.git "$interview_puzzles_clone_home"
    # NOTE: Upgraded in a sub-shell to not modify the current $PATH.
    (upgrade_python_virtual_environments "$interview_puzzles_clone_home"/venv)
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r crypto_bot_remote=git@github.com:tomas-skalicky/crypto-bot.git
    git_repo_clone_or_pull "$crypto_bot_remote" "$java_projects_home_dir/crypto-bot"
    git_repo_clone_or_pull "$crypto_bot_remote" "$crypto_bot_for_anacron_production_run_home_path"
    git_repo_clone_or_pull "$crypto_bot_remote" "$crypto_bot_for_crontab_production_run_home_path"
}

#-------------------------------------------------------------------------------

configure_pass() {
    local block_contents
    set +e
    read -r -d '' block_contents <<- EOF
	export PASSWORD_STORE_DIR=$(determine_password_storage_directory_path)
	export EDITOR=/usr/bin/vim
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Pass configuration'
    local -r end_comment='# <END> Pass configuration'
    set_or_replace_block_contents_in_file \
                                         "$user_home"/.bashrc \
                                         "$block_contents" \
                                         "$begin_comment" \
                                         "$end_comment"
}

#-------------------------------------------------------------------------------

main() {
    configure_file_system
    install_private_laptop_specific_debian_packages
    install_private_laptop_specific_snap_packages
    install_private_laptop_specific_python_packages
    configure_ssh
    configure_gnupg2
    install_multimedia_software
    set_up_backup_process
    local -r java_projects_home_dir=${user_home:?}/Documents/development/java/source_files
    local -r dropbox_home_dir=${user_home:?}/Documents/Dropbox
    local -r python_projects_home_dir=${user_home:?}/Documents/development/python/source_files
    create_or_update_auxiliary_functions_for_interactive_shells \
                                                                "${dropbox_home_dir:?}" \
                                                                "${python_projects_home_dir:?}" \
                                                                "${java_projects_home_dir:?}"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r crypto_bot_for_anacron_production_run_home_path=${java_projects_home_dir:?}/crypto-bot-for-production-run-by-anacron
    set_up_anacron_for_crypto_bot "${crypto_bot_for_anacron_production_run_home_path:?}"
    local -r crypto_bot_for_crontab_production_run_home_path=${java_projects_home_dir:?}/crypto-bot-for-production-run-by-crontab
    set_up_crontab_for_crypto_bot "${crypto_bot_for_crontab_production_run_home_path:?}"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    clone_git_repos_and_upgrade_virtual_environments \
                                                     "${python_projects_home_dir:?}" \
                                                     "${java_projects_home_dir:?}" \
                                                     "${crypto_bot_for_anacron_production_run_home_path:?}" \
                                                     "${crypto_bot_for_crontab_production_run_home_path:?}"
    configure_pass
}

#-------------------------------------------------------------------------------

main


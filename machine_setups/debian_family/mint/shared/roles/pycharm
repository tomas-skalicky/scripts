#!/usr/bin/env bash
#author      :Tomas Skalicky <skalicky.tomas@gmail.com>
#===============================================================================

#-------------------------------------------------------------------------------

license_version_arg=${1:?}

#-------------------------------------------------------------------------------

update_pycharm_vmoptions() {
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r filepath=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r prefixes_of_lines_to_remove=(
        -Xmx
        '-XX:ReservedCodeCacheSize='
    )
    remove_lines_with_prefixes_from_file "$filepath" "${prefixes_of_lines_to_remove[@]}"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local block_contents
    set +e
    # The code cache contains results of JIT compiler (e.g. native code of
    # compiled methods). If the code case is full, JVM prints out a warning and
    # switch to interpretation mode. The JIT compiler is turned off and the
    # application velocity may radically descrease. (from
    # https://blog.codecentric.de/2011/07/nutzliche-jvm-flags-teil-4/)
    read -r -d '' block_contents <<- EOF
	-Xmx1g
	-XX:ReservedCodeCacheSize=512m
	-Duser.name=Tomas Skalicky
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Custom configuration - generated by pycharm role'
    local -r end_comment='# <END> Custom configuration - generated by pycharm role'
    set_or_replace_block_contents_in_file \
                                          "$filepath" \
                                          "$block_contents" \
                                          "$begin_comment" \
                                          "$end_comment"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

install_pycharm() {
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r license_version=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -A pycharm
    # shellcheck disable=SC2154
    pycharm[product]=pycharm-${license_version}-2025.1
    # shellcheck disable=SC2154
    pycharm[installer_filename]=${pycharm[product]}.tar.gz
    # shellcheck disable=SC2154
    pycharm[installer_filepath]=$user_downloads/${pycharm[installer_filename]}
    # shellcheck disable=SC2154
    pycharm[root]=${additional_software_root:?}/pycharm
    # shellcheck disable=SC2154
    pycharm[installation_path]=${pycharm[root]}/${pycharm[product]}
    # shellcheck disable=SC2154
    pycharm[link_name]=/usr/bin/pycharm-$license_version
    # shellcheck disable=SC2154
    pycharm[link_target]=${pycharm[installation_path]}/bin/pycharm
    # shellcheck disable=SC2154
    pycharm[link_exists]=false
    # shellcheck disable=SC2154
    pycharm[link_up_to_date]=false
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ -L ${pycharm[link_name]} ]]; then
        pycharm[link_exists]=true
        local -r current_link_target=$(realpath ${pycharm[link_name]})
        if [[ $current_link_target = "${pycharm[link_target]}" ]]; then
            print_info "The link target $current_link_target is the correct" \
                       "one, hence pycharm is very likely up to date."
            pycharm[link_up_to_date]=true
        else
            print_info "Removes the pycharm link since the current link target" \
                       "$current_link_target is obsolete. The new one is" \
                       "${pycharm[link_target]}."
            pycharm[link_up_to_date]=false
        fi
    fi
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if ! ${pycharm[link_up_to_date]}; then
        if [[ ! -d ${pycharm[root]} ]]; then
            mkdir --verbose --parents "${pycharm[root]}"
        fi
        if [[ ! -f ${pycharm[installer_filepath]} ]]; then
            wget \
                 --output-document="${pycharm[installer_filepath]}" \
                 "https://download.jetbrains.com/python/${pycharm[installer_filename]}"
        fi
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # head -1 results with exit code 141 (SIGPIPE 128+13). The reason is
        # that tar is still writing to the pipe, but there is no reader.
        set +o pipefail
        # shellcheck disable=SC2154
        pycharm[unpacked_dirname]=$(tar --gzip --list --file "${pycharm[installer_filepath]}" \
            | head -1 | cut --delimiter='/' --fields=1)
        set -o pipefail
        # shellcheck disable=SC2154
        pycharm[unpacked_path]=$user_downloads/${pycharm[unpacked_dirname]}
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        tar --gzip --extract --file "${pycharm[installer_filepath]}" --directory "$user_downloads"
        rm --force --recursive "${pycharm[installation_path]}"
        mv --verbose "${pycharm[unpacked_path]}" "${pycharm[installation_path]}"
        # pycharm intern version links the public version.
        ln --verbose --symbolic "${pycharm[installation_path]}" "${pycharm[root]}/${pycharm[unpacked_dirname]}"
        # If the installation needs to be restarted, keeping the install till
        # the end and removing there can save us repeatition of downloading.
        rm --force --recursive "${pycharm[installer_filepath]}"
    fi
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r filepath=${pycharm[installation_path]}/bin/pycharm64.vmoptions
    update_pycharm_vmoptions "$filepath"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if ! ${pycharm[link_up_to_date]}; then
        if ${pycharm[link_exists]}; then
            unlink "${pycharm[link_name]}"
        fi
        ln --verbose --symbolic "${pycharm[link_target]}" "${pycharm[link_name]}"
    fi
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

check_license_version() {
    local -r license_version=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $license_version != community ]] && [[ $license_version != professional ]]; then
        print_error "License version [$license_version] is not supported"
        exit 1
    fi
}

#-------------------------------------------------------------------------------

main() {
    local -r license_version=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    check_license_version "$license_version"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    install_pycharm "$license_version"
}

#-------------------------------------------------------------------------------

main "$license_version_arg"


#!/usr/bin/env bash
#author      :Tomas Skalicky <skalicky.tomas@gmail.com>
#===============================================================================

#-------------------------------------------------------------------------------

license_version_arg=${1:?}

#-------------------------------------------------------------------------------

# https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit
change_inotify_watch_limit() {
    local file_contents
    set +e
    read -r -d '' file_contents <<- EOF
	fs.inotify.max_user_watches = 524288
	EOF
    set -e
    local -r file_path=/etc/sysctl.d/idea.conf
    set_file_contents \
                      "$file_path" \
                      "$file_contents"
    sysctl -p"$file_path"
}

install_inotify() {
    aptget_install inotify-tools   # To monitor changes in file system.
    change_inotify_watch_limit
}

#-------------------------------------------------------------------------------

update_idea_vmoptions() {
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r filepath=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r prefixes_of_lines_to_remove=(
        -Xmx
        '-XX:ReservedCodeCacheSize='
    )
    remove_lines_with_prefixes_from_file "$filepath" "${prefixes_of_lines_to_remove[@]}"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local block_contents
    set +e
    # The code cache contains results of JIT compiler (e.g. native code of
    # compiled methods). If the code case is full, JVM prints out a warning and
    # switch to interpretation mode. The JIT compiler is turned off and the
    # application velocity may radically descrease. (from
    # https://blog.codecentric.de/2011/07/nutzliche-jvm-flags-teil-4/)
    read -r -d '' block_contents <<- EOF
	-Xmx4g
	-XX:ReservedCodeCacheSize=1024m
	-Duser.name=Tomas Skalicky
	EOF
    set -e
    local -r begin_comment='# <BEGIN> Custom configuration - generated by intellij_idea role'
    local -r end_comment='# <END> Custom configuration - generated by intellij_idea role'
    set_or_replace_block_contents_in_file \
                                          "$filepath" \
                                          "$block_contents" \
                                          "$begin_comment" \
                                          "$end_comment"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

install_idea() {
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r license_version=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -A idea
    # shellcheck disable=SC2154
    idea[product]=idea${license_version}-2019.3.1
    # shellcheck disable=SC2154
    idea[installer_filename]=${idea[product]}-no-jbr.tar.gz
    # shellcheck disable=SC2154
    idea[installer_filepath]=$user_downloads/${idea[installer_filename]}
    # shellcheck disable=SC2154
    idea[root]=${additional_software_root:?}/intellij/idea
    # shellcheck disable=SC2154
    idea[installation_path]=${idea[root]}/${idea[product]}
    # shellcheck disable=SC2154
    idea[link_name]=/usr/bin/idea$license_version
    # shellcheck disable=SC2154
    idea[link_target]=${idea[installation_path]}/bin/idea.sh
    # shellcheck disable=SC2154
    idea[link_exists]=false
    # shellcheck disable=SC2154
    idea[link_up_to_date]=false
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ -L ${idea[link_name]} ]]; then
        idea[link_exists]=true
        local -r current_link_target=$(realpath ${idea[link_name]})
        if [[ $current_link_target = "${idea[link_target]}" ]]; then
            print_info "The link target $current_link_target is the correct" \
                       "one, hence idea is very likely up to date."
            idea[link_up_to_date]=true
        else
            print_info "Removes the idea link since the current link target" \
                       "$current_link_target is obsolete. The new one is" \
                       "${idea[link_target]}."
            idea[link_up_to_date]=false
        fi
    fi
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if ! ${idea[link_up_to_date]}; then
        if [[ ! -d ${idea[root]} ]]; then
            mkdir --verbose --parents "${idea[root]}"
        fi
        if [[ ! -f ${idea[installer_filepath]} ]]; then
            wget \
                 --output-document="${idea[installer_filepath]}" \
                 "https://download.jetbrains.com/idea/${idea[installer_filename]}"
        fi
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        # head -1 results with exit code 141 (SIGPIPE 128+13). The reason is
        # that tar is still writing to the pipe, but there is no reader.
        set +o pipefail
        # shellcheck disable=SC2154
        idea[unpacked_dirname]=$(tar --gzip --list --file "${idea[installer_filepath]}" \
            | head -1 | cut --delimiter='/' --fields=1)
        set -o pipefail
        # shellcheck disable=SC2154
        idea[unpacked_path]=$user_downloads/${idea[unpacked_dirname]}
        #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        tar --gzip --extract --file "${idea[installer_filepath]}" --directory "$user_downloads"
        rm --force --recursive "${idea[installation_path]}"
        mv --verbose "${idea[unpacked_path]}" "${idea[installation_path]}"
        # IDEA intern version links the public version.
        ln --verbose --symbolic "${idea[installation_path]}" "${idea[root]}/${idea[unpacked_dirname]}"
        # If the installation needs to be restarted, keeping the install till
        # the end and removing there can save us repeatition of downloading.
        rm --force --recursive "${idea[installer_filepath]}"
    fi
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    local -r filepath=${idea[installation_path]}/bin/idea64.vmoptions
    update_idea_vmoptions "$filepath"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if ! ${idea[link_up_to_date]}; then
        if ${idea[link_exists]}; then
            unlink "${idea[link_name]}"
        fi
        ln --verbose --symbolic "${idea[link_target]}" "${idea[link_name]}"
    fi
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}

#-------------------------------------------------------------------------------

check_license_version() {
    local -r license_version=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    if [[ $license_version != IC ]] && [[ $license_version != IU ]]; then
        print_error "License version [$license_version] is not supported"
        exit 1
    fi
}

#-------------------------------------------------------------------------------

main() {
    local -r license_version=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    check_license_version "$license_version"
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    install_inotify
    install_idea "$license_version"
}

#-------------------------------------------------------------------------------

main "$license_version_arg"


#!/usr/bin/env bash
#author      :Tomas Skalicky <skalicky.tomas@gmail.com>
#===============================================================================

#-------------------------------------------------------------------------------

development_kit_to_install_or_update=${1:?}

#-------------------------------------------------------------------------------

install_or_update_sdkman() {
    curl --silent https://get.sdkman.io | sudo --user="${username:?}" bash
    sudo --user="${username:?}" bash -c "source \"${user_home:?}\"/.sdkman/bin/sdkman-init.sh;
                                         sdk update"
}

#-------------------------------------------------------------------------------

install_or_update_development_kit() {
    local -r development_kit_to_install_or_update=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # `bash -l' to get `sdk' command.
    sudo --user="${username:?}" bash -l -c "# The first execution of
                                            # ``sdk current <development_kit>'
                                            # is to see the name of the kit and
                                            # the version on the command line.
                                            sdk current '$development_kit_to_install_or_update';
                                            if sdk current '$development_kit_to_install_or_update' | grep 'Not using any version of $development_kit_to_install_or_update' >/dev/null; then
                                                sdk install '$development_kit_to_install_or_update';
                                            else
                                                sdk upgrade '$development_kit_to_install_or_update';
                                            fi"
}

uninstall_non_current_versions() {
    local -r development_kit=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # `bash -l' to get `sdk' command.
    sudo --user="${username:?}" bash -l -c "while read version_to_be_removed; do
                                                sdk uninstall '$development_kit' \"\$version_to_be_removed\";
                                            done < <(sdk list '$development_kit' \
                                                | sed --regexp-extended 's/[ ]*([\>\*\ ]*[0-9a-zA-Z\.\_\-]+)[ ]*/\1\n/g' \
                                                | grep '^* [[:digit:]]' \
                                                | sed 's/^\* //')"
}

#-------------------------------------------------------------------------------

main() {
    local -r development_kit_to_install_or_update=${1:?}
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    install_or_update_sdkman
    install_or_update_development_kit "$development_kit_to_install_or_update"
    uninstall_non_current_versions "$development_kit_to_install_or_update"
}

#-------------------------------------------------------------------------------

main "$development_kit_to_install_or_update"

